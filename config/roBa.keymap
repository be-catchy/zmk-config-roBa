#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB           &kp W    &kp E         &kp R           &kp T                                      &kp Y            &kp U    &kp I     &kp O        &kp P
&kp A             &kp S    &kp D         &kp F           &kp G        &kp LS(LG(S))       &kp F4    &kp H            &kp J    &kp K     &kp L        &kp ENTER
&mt LEFT_SHIFT Z  &kp X    &kp C         &kp V           &kp B        &kp LEFT_WIN        &kp F2    &kp N            &lt 3 M  &mkp MB1  &lt 3 MINUS  &lt 3 PERIOD
&kp LCTRL         &kp ESC  &kp LEFT_ALT  &kp LEFT_SHIFT  &lt 1 SPACE  &lt 3 CAPSLOCK      &mkp MB2  &lt 2 BACKSPACE                                  &kp COMMA
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(N5)                                &kp LS(N7)        &kp LS(N9)        &kp LS(N0)         &kp SEMICOLON      &kp MINUS
&kp LS(GRAVE)     &trans            &trans            &trans            &kp LS(SINGLE_QUOTE)  &trans      &trans  &kp SINGLE_QUOTE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LS(SEMICOLON)  &kp LS(SLASH)
&kp EQUAL         &trans            &trans            &kp HOME          &kp INT_MUHENKAN      &trans      &trans  &kp LS(COMMA)     &kp LS(PERIOD)    &kp SLASH          &kp PERIOD         &kp DEL
&kp ESC           &trans            &trans            &trans            &trans                &trans      &trans  &trans                                                                    &kp LS(MINUS)
            >;
        };

        NUM {
            bindings = <
&kp Q         &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_EQUAL_AS400                             &trans          &trans          &kp UP_ARROW    &trans     &trans
&kp SLASH     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MINUS        &trans             &trans  &trans          &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &kp BACKSPACE
&kp ASTERISK  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_PLUS         &trans             &trans  &kp KP_NUMLOCK  &trans          &trans          &trans     &trans
&kp ESCAPE    &kp KP_NUMBER_0  &kp KP_DOT       &kp DEL          &kp ENTER           &kp BACKSPACE      &trans  &trans                                                     &trans
            >;
        };

        ARROW {
            bindings = <
&kp DEL    &kp F2     &kp F3     &kp F5     &kp F4                            &trans        &trans        &trans     &trans         &trans
&kp LC(A)  &kp LC(S)  &trans     &trans     &kp CAPSLOCK  &trans      &trans  &kp LC(HOME)  &kp RA(LEFT)  &kp LC(W)  &kp RA(RIGHT)  &kp BACKSPACE
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)     &trans      &trans  &kp LC(C)     &kp LC(V)     &mkp MB2   &kp LG(V)      &kp LG(G)
&kp LC(Y)  &kp LWIN   &trans     &trans     &trans        &trans      &trans  &trans                                                &kp PRINTSCREEN
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
